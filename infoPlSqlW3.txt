Tutorial de SQL

SQL é uma linguagem padrão para armazenar, manipular e recuperar dados em bancos de dados.
Nosso tutorial SQL irá ensiná-lo a usar SQL em: MySQL, SQL Server, MS Access, Oracle, Sybase, Informix, Postgres e outros sistemas de banco de dados.

----------------------------------------------------------------------------------
Introdução ao SQL
SQL é uma linguagem padrão para acessar e manipular bancos de dados.

O que é SQL?
SQL significa Structured Query Language
SQL permite que você acesse e manipule bancos de dados
SQL se tornou um padrão do American National Standards Institute (ANSI) em 1986 e da International Organization for Standardization (ISO) em 1987

O que o SQL pode fazer?
SQL pode executar consultas em um banco de dados
SQL pode recuperar dados de um banco de dados
SQL pode inserir registros em um banco de dados
SQL pode atualizar registros em um banco de dados
SQL pode excluir registros de um banco de dados
SQL pode criar novos bancos de dados
SQL pode criar novas tabelas em um banco de dados
SQL pode criar procedimentos armazenados em um banco de dados
SQL pode criar visualizações em um banco de dados
SQL pode definir permissões em tabelas, procedimentos e visualizações

SQL é um padrão - MAS ....
Embora SQL seja um padrão ANSI / ISO, existem diferentes versões da linguagem SQL.
No entanto, para estar em conformidade com a norma ANSI, que todo o suporte, pelo menos, os comandos principais (tais como SELECT, UPDATE, DELETE, INSERT, WHERE) de uma forma semelhante.

Observação: a maioria dos programas de banco de dados SQL também tem suas próprias extensões proprietárias, além do padrão SQL!

Usando SQL em seu site
Para construir um site que mostre dados de um banco de dados, você precisará de:

Um programa de banco de dados RDBMS (ou seja, MS Access, SQL Server, MySQL)
Para usar uma linguagem de script do lado do servidor, como PHP ou ASP
Para usar SQL para obter os dados que você deseja
Para usar HTML / CSS para estilizar a página

RDBMS
RDBMS significa Relational Database Management System.
RDBMS é a base para SQL e para todos os sistemas de banco de dados modernos, como MS SQL Server, IBM DB2, Oracle, MySQL e Microsoft Access.
Os dados no RDBMS são armazenados em objetos de banco de dados chamados tabelas. Uma tabela é uma coleção de entradas de dados relacionadas e consiste em colunas e linhas.

Observe a tabela "Clientes":

Exemplo
SELECT * FROM Customers;

Cada tabela é dividida em entidades menores chamadas campos. Os campos da tabela Clientes consistem em CustomerID, CustomerName, ContactName, Address, City, PostalCode e Country. Um campo é uma coluna em uma tabela projetada para manter informações específicas sobre cada registro na tabela.

Um registro, também chamado de linha, é cada entrada individual que existe em uma tabela. Por exemplo, existem 91 registros na tabela Clientes acima. Um registro é uma entidade horizontal em uma tabela.

Uma coluna é uma entidade vertical em uma tabela que contém todas as informações associadas a um campo específico em uma tabela.

----------------------------------------------------------------------------------

Sintaxe SQL
Tabelas de banco de dados
Um banco de dados geralmente contém uma ou mais tabelas. Cada tabela é identificada por um nome (por exemplo, "Clientes" ou "Pedidos"). As tabelas contêm registros (linhas) com dados.

Neste tutorial, usaremos o conhecido banco de dados de exemplo Northwind (incluído no MS Access e no MS SQL Server).

Instruções SQL
A maioria das ações que você precisa executar em um banco de dados é feita com instruções SQL.
A seguinte instrução SQL seleciona todos os registros na tabela "Clientes":

Exemplo
SELECT * FROM Customers;

Neste tutorial, ensinaremos tudo sobre as diferentes instruções SQL.

Tenha em mente que...
Palavras-chave SQL NÃO diferenciam maiúsculas de minúsculas: selecté o mesmo que SELECT
Neste tutorial, escreveremos todas as palavras-chave SQL em maiúsculas.

Ponto e vírgula após instruções SQL?
Alguns sistemas de banco de dados requerem um ponto-e-vírgula no final de cada instrução SQL.
Ponto-e-vírgula é a forma padrão de separar cada instrução SQL em sistemas de banco de dados que permitem que mais de uma instrução SQL seja executada na mesma chamada para o servidor.

Neste tutorial, usaremos ponto-e-vírgula no final de cada instrução SQL.

Alguns dos comandos SQL mais importantes:

SELECT - extrai dados de um banco de dados
UPDATE - atualiza dados em um banco de dados
DELETE - exclui dados de um banco de dados
INSERT INTO - insere novos dados em um banco de dados
CREATE DATABASE - cria um novo banco de dados
ALTER DATABASE - modifica um banco de dados
CREATE TABLE - cria uma nova mesa
ALTER TABLE - modifica uma mesa
DROP TABLE - exclui uma mesa
CREATE INDEX - cria um índice (chave de pesquisa)
DROP INDEX - exclui um índice

----------------------------------------------------------------------------------

Instrução SQL SELECT
A instrução SQL SELECT
A SELECT instrução é usada para selecionar dados de um banco de dados.
Os dados retornados são armazenados em uma tabela de resultados, chamada de conjunto de resultados.

SELECIONE Sintaxe
SELECT column1, column2, ...
FROM table_name;

Aqui, coluna1, coluna2, ... são os nomes dos campos da tabela da qual você deseja selecionar os dados. Se você deseja selecionar todos os campos disponíveis na tabela, use a seguinte sintaxe:

SELECT * FROM table_name;

Exemplo de coluna SELECT
A seguinte instrução SQL seleciona as colunas "CustomerName" e "City" da tabela "Clientes":

Exemplo
SELECT CustomerName, City FROM Customers;

SELECT * Exemplo
A seguinte instrução SQL seleciona todas as colunas da tabela "Clientes":

Exemplo
SELECT * FROM Customers;

----------------------------------------------------------------------------------

Instrução SQL SELECT DISTINCT
A instrução SQL SELECT DISTINCT
A SELECT DISTINCT instrução é usada para retornar apenas valores distintos (diferentes).

Dentro de uma tabela, uma coluna geralmente contém muitos valores duplicados; e às vezes você só deseja listar os valores diferentes (distintos).

Sintaxe SELECT DISTINCT
SELECT DISTINCT column1, column2, ...
FROM table_name;

SELECT Exemplo sem DISTINCT
A seguinte instrução SQL seleciona todos os valores (incluindo as duplicatas) da coluna "País" na tabela "Clientes":

Exemplo
SELECT Country FROM Customers;
Agora, vamos usar a SELECT DISTINCT instrução

Exemplos de SELECT DISTINCT
A seguinte instrução SQL seleciona apenas os valores DISTINCT da coluna "País" na tabela "Clientes":

Exemplo
SELECT DISTINCT Country FROM Customers;
A seguinte instrução SQL lista o número de países clientes diferentes (distintos):

Exemplo
SELECT COUNT(DISTINCT Country) FROM Customers;

A seguinte instrução SQL lista o número de países clientes diferentes (distintos):

Exemplo
SELECT COUNT(DISTINCT Country) FROM Customers;
Nota: O exemplo acima não funcionará no Firefox! Porque COUNT (DISTINCT column_name ) não tem suporte nos bancos de dados do Microsoft Access. O Firefox está usando o Microsoft Access em nossos exemplos.

Aqui está a solução alternativa para o MS Access:

Exemplo
SELECT Count(*) AS DistinctCountries
FROM (SELECT DISTINCT Country FROM Customers);

----------------------------------------------------------------------------------

Cláusula SQL WHERE
A cláusula SQL WHERE
A WHERE cláusula é usada para filtrar registros.

É usado para extrair apenas os registros que atendem a uma condição especificada.

Sintaxe WHERE
SELECT column1, column2, ...
FROM table_name
WHERE condition;
Nota: A WHERE cláusula não é utilizado de SELECT declarações, ele também é usado em UPDATE, DELETE etc.!

Exemplo de cláusula WHERE
A seguinte instrução SQL seleciona todos os clientes do país "México", na tabela "Clientes":

Exemplo
SELECT * FROM Customers
WHERE Country='Mexico';

Campos de texto vs. campos numéricos
SQL requer aspas simples em torno dos valores de texto (a maioria dos sistemas de banco de dados também permite aspas duplas).

No entanto, os campos numéricos não devem ser colocados entre aspas:

Exemplo
SELECT * FROM Customers
WHERE CustomerID=1;

Operadores na cláusula WHERE
Os seguintes operadores podem ser usados ​​na WHEREcláusula:

Operator	Description	Example
=	Equal	
>	Greater than	
<	Less than	
>=	Greater than or equal	
<=	Less than or equal	
<>	Not equal. Note: In some versions of SQL this operator may be written as !=	
BETWEEN	Between a certain range	
LIKE	Search for a pattern	
IN	To specify multiple possible values for a column

----------------------------------------------------------------------------------

Operadores SQL AND, OR e NOT
Os operadores SQL AND, OR e NOT
A WHERE cláusula pode ser combinado com AND, OR e NOT operadores.

Os operadores AND e OR são usados ​​para filtrar registros com base em mais de uma condição:

O AND operador exibe um registro se todas as condições separadas por AND forem TRUE.
O OR operador exibe um registro se alguma das condições separadas por OR for TRUE.
O NOT operador exibe um registro se as condições NÃO forem verdadeiras.

Sintaxe AND
SELECT column1, column2, ...
FROM table_name
WHERE condition1 AND condition2 AND condition3 ...;

OR Sintaxe
SELECT column1, column2, ...
FROM table_name
WHERE condition1 OR condition2 OR condition3 ...;

NÃO Sintaxe
SELECT column1, column2, ...
FROM table_name
WHERE NOT condition;

E Exemplo
A seguinte instrução SQL seleciona todos os campos de "Clientes" onde o país é "Alemanha" E a cidade é "Berlim":
Exemplo
SELECT * FROM Customers
WHERE Country='Germany' AND City='Berlin';
OR Exemplo

A seguinte instrução SQL seleciona todos os campos de "Clientes" onde a cidade é "Berlim" OU "Munique":
Exemplo
SELECT * FROM Customers
WHERE City='Berlin' OR City='München';

A seguinte instrução SQL seleciona todos os campos de "Clientes" onde o país é "Alemanha" OU "Espanha":
Exemplo
SELECT * FROM Customers
WHERE Country='Germany' OR Country='Spain';
NÃO Exemplo

A seguinte instrução SQL seleciona todos os campos de "Clientes" onde o país NÃO é "Alemanha":
Exemplo
SELECT * FROM Customers
WHERE NOT Country='Germany';

Combinando AND, OR e NOT
Você também pode combinar as AND, OR e NOT operadores.

A seguinte instrução SQL seleciona todos os campos de "Clientes" onde o país é "Alemanha" E a cidade deve ser "Berlim" OU "Munique" (use parênteses para formar expressões complexas):

Exemplo
SELECT * FROM Customers
WHERE Country='Germany' AND (City='Berlin' OR City='München');

A seguinte instrução SQL seleciona todos os campos de "Clientes" onde o país NÃO é "Alemanha" e NÃO "EUA":
Exemplo
SELECT * FROM Customers
WHERE NOT Country='Germany' AND NOT Country='USA';

----------------------------------------------------------------------------------

Palavra-chave SQL ORDER BY

A palavra-chave SQL ORDER BY
A ORDER BYpalavra-chave é usada para classificar o conjunto de resultados em ordem crescente ou decrescente.

A ORDER BY palavra-chave classifica os registros em ordem crescente por padrão. Para classificar os registros em ordem decrescente, use a DESC palavra - chave.

Sintaxe ORDER BY
SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC;

Exemplo de ORDER BY
A seguinte instrução SQL seleciona todos os clientes da tabela "Clientes", classificados pela coluna "País":

Exemplo
SELECT * FROM Customers
ORDER BY Country;

ORDER BY Várias Colunas Exemplo
A instrução SQL a seguir seleciona todos os clientes da tabela "Clientes", classificados pela coluna "País" e "Nome do cliente". Isso significa que ele ordena por país, mas se algumas linhas têm o mesmo país, ele as classifica por CustomerName:

Exemplo
SELECT * FROM Customers
ORDER BY Country, CustomerName;

ORDENAR POR Várias Colunas Exemplo 2
A seguinte instrução SQL seleciona todos os clientes da tabela "Clientes", classificados em ordem crescente pelo "País" e decrescente pela coluna "Nome do cliente":

Exemplo
SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC;

----------------------------------------------------------------------------------

Instrução SQL INSERT INTO
A instrução SQL INSERT INTO
A INSERT INTO instrução é usada para inserir novos registros em uma tabela.

Sintaxe INSERT INTO
É possível escrever a INSERT INTO declaração de duas maneiras:

1. Especifique os nomes das colunas e os valores a serem inseridos:

INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);

2. Se você estiver adicionando valores para todas as colunas da tabela, não será necessário especificar os nomes das colunas na consulta SQL. No entanto, certifique-se de que a ordem dos valores esteja na mesma ordem das colunas da tabela. Aqui, a INSERT INTO sintaxe seria a seguinte:

INSERT INTO table_name
VALUES (value1, value2, value3, ...);

INSERT INTO Exemplo
A seguinte instrução SQL insere um novo registro na tabela "Clientes":

Exemplo
INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');

Você percebeu que não inserimos nenhum número no campo CustomerID?
A coluna CustomerID é um campo de incremento automático e será gerada automaticamente quando um novo registro for inserido na tabela.

Inserir dados apenas em colunas especificadas
Também é possível inserir dados apenas em colunas específicas.

A seguinte instrução SQL irá inserir um novo registro, mas apenas inserir dados nas colunas "CustomerName", "City" e "Country" (CustomerID será atualizado automaticamente):

Exemplo
INSERT INTO Customers (CustomerName, City, Country)
VALUES ('Cardinal', 'Stavanger', 'Norway');
----------------------------------------------------------------------------------

Valores SQL NULL
O que é um valor NULL?
Um campo com valor NULL é um campo sem valor.

Se um campo em uma tabela for opcional, é possível inserir um novo registro ou atualizar um registro sem adicionar um valor a este campo. Em seguida, o campo será salvo com um valor NULL.

Observação: um valor NULL é diferente de um valor zero ou de um campo que contém espaços. Um campo com um valor NULL é aquele que foi deixado em branco durante a criação do registro!

Como testar valores NULL?
Não é possível testar os valores NULL com operadores de comparação, como =, <ou <>.

Teremos que usar os operadores IS NULLe IS NOT NULLem vez disso.

Sintaxe IS NULL
SELECT column_names
FROM table_name
WHERE column_name IS NULL;

Sintaxe NÃO É NULA
SELECT column_names
FROM table_name
WHERE column_name IS NOT NULL;

O operador IS NULL
O IS NULL operador é usado para testar os valores vazios (valores NULL).

O seguinte SQL lista todos os clientes com um valor NULL no campo "Endereço":

Exemplo
SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NULL;

Dica: Sempre use IS NULL para procurar valores NULL.

O operador IS NOT NULL
O IS NOT NULLo perador é usado para testar os valores não vazios (valores NOT NULL).

O seguinte SQL lista todos os clientes com um valor no campo "Endereço":

Exemplo
SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NOT NULL;
----------------------------------------------------------------------------------

